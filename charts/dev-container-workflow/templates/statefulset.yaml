apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "dev-container-workflow.fullname" . }}
  labels:
    {{- include "dev-container-workflow.labels" . | nindent 4 }}
spec:
  replicas: 1
  serviceName: {{ .Release.Name }}
  selector:
    matchLabels:
      {{- include "dev-container-workflow.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "dev-container-workflow.selectorLabels" . | nindent 8 }}
    spec:
      terminationGracePeriodSeconds: 30
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dev-container-workflow.serviceAccountName" . }}
      securityContext:
        fsGroup: {{ .Values.user.gid }}
        runAsUser: {{ .Values.user.uid }}
        runAsGroup: {{ .Values.user.gid }}
        fsGroupChangePolicy: "OnRootMismatch"
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            capabilies:
              {{- toYaml .Values.securityContext.capabilities | nindent 12 }}
            readOnlyRootFilesystem: {{ default true .Values.securityContext.readOnlyRootFilesystem }}
            runAsNonRoot: {{ default true .Values.securityContext.runAsNonRoot }}
          image: "{{ .Values.image.repository | default .Chart.Name }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: ssh
              containerPort: {{ .Values.sshPort }}
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: {{ .Values.sshPort }}
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: {{ .Values.sshPort }}
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            USERNAME: {{ .Values.user.username | quote }}
          volumeMounts:
          - name: "home"
            mountPath: {{ printf "/home/%s" .Values.user.username }}
          - name: "aws"
            mountPath: "/mnt/aws"
          - name: "ssh"
            mountPath: "/mnt/ssh"
          - name: "git"
            mountPath: "/mnt/git"
      initContainers:
        - name: "{{ .Chart.Name }}-init"
          env:
            USERNAME: {{ .Values.user.username | quote }}
            HOME_VOLUME: {{ printf "/home/%s" .Values.user.username }}
            AWS_VOLUME: "/mnt/aws"
            GIT_VOLUME: "/mnt/git"
            SSH_VOLUME: "/mnt/ssh"
            ASDF_VERSION: {{ default "v1.10.2" .Values.asdf.version | quote }}
            ASDF_PLUGINS: {{ .Values.asdf.plugins | quote }}
            KREW_PLUGINS: {{ .Values.krew.plugins | quote }}
          securityContext:
            capabilies:
              {{- toYaml .Values.securityContext.capabilities | nindent 12 }}
            readOnlyRootFilesystem: {{ default true .Values.securityContext.readOnlyRootFilesystem }}
            runAsNonRoot: {{ default true .Values.securityContext.runAsNonRoot }}
            {{- if .Values.securityContext.runAsNonRoot }}
            runAsUser: {{ .Values.user.uid }}
            {{- end }}
          image: busybox
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ['sh', '-c', '/scripts/init.sh']
          volumeMounts:
          - name: "home"
            mountPath: "/home"
          - name: "scripts"
            mountPath: "/scripts"
          - name: "git"
            mountPath: "/git"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: "scripts"
        configMap:
          name: {{ printf "%s-scripts" (include "dev-container-workflow.fullname" .) }}
      - name: "git"
        configMap:
          name: {{ printf "%s-git" (include "dev-container-workflow.fullname" .) }}
      - name: "ssh"
        projected:
          sources:
            secret:
              {{- if .Values.ssh.keysSecretName }}
              secretName: {{ .Values.ssh.keysSecretName | quote }}
              {{- else }}
              secretName: {{ printf "%s-ssh-keys" (include "dev-container-workflow.fullname" .) }}
              {{- end }}
            configMap:
              name: {{ printf "%s-ssh" (include "dev-container-workflow.fullname" .) }}
      - name: "aws"
        projected:
          sources:
            secret:
              {{- if .Values.aws.credentialsSecretName }}
              secretName: {{ .Values.aws.credetialsSecretName }}
              {{- else }}
              secretName: {{ printf "%s-aws-credentials" (include "dev-container-workflow.fullname" .) }}
              {{- end }}
            configMap:
              name: {{ printf "%s-aws" (include "dev-container-workflow.fullname" .) }}
      volumeClaimTemplates:
      - metadata:
          name: "home"
        spec:
          accessModes: [ {{ .Values.volume.accessMode }} ]
          storageClassName: {{ .Values.volume.storageClass | quote }}
          resources:
            requests:
              storage: {{ .Values.volume.request | quote }}
